using System.Text.RegularExpressions;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using TelegramBot.Downloader;

namespace TelegramBot.Telegram;

public class UpdateHandler(ITelegramBotClient botClient, IDownloader downloader, ILogger<UpdateHandler> logger)
    : IUpdateHandler
{
    public async Task HandleUpdateAsync(ITelegramBotClient _, Update update, CancellationToken cancellationToken)
    {
        var telegramId = GetChatIdOrDefault(update);

        if (!telegramId.HasValue)
        {
            return;
        }

        switch (update.Type)
        {
            case UpdateType.Message:
                await HandleTextMessageAsync(telegramId.Value, update, cancellationToken);

                return;
        }
    }

    private async Task HandleTextMessageAsync(long telegramId, Update update, CancellationToken cancellationToken)
    {
        try
        {
            var message = update.Message;

            if (message == null)
            {
                return;
            }

            logger.LogInformation(
                $"[UpdateHandler] Received text message: {message.Text} from user with id {telegramId}");

            if (message.Text == "/start")
            {
                using var stream = new FileStream("./Miku.gif", FileMode.Open, FileAccess.Read, FileShare.Read);

                await botClient.SendMessage(telegramId,
                   text:
                    "–ü—Ä–∏–≤–µ—Ç–∏–∫! –Ø –ú–∏–∫—É, —Ç–≤–æ—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ üéÄ \n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–æ—á–∫—É –Ω–∞ –≤–∏–¥–µ–æ –≤–µ—Å–æ–º –¥–æ 50 mb (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å X, YouTube, Instagram –∏–ª–∏ TikTok), –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–æ—Å—Ç–∞—Ç—å –µ–≥–æ –¥–ª—è —Ç–µ–±—è, —Ö–æ—Ä–æ—à–æ~?",
                    cancellationToken: cancellationToken);

                await botClient.SendAnimation(telegramId,
                    animation: InputFile.FromStream(stream),
                    cancellationToken: cancellationToken);
            }
            else
            {
                var extractedUrl = TryExtractUrl(message);

                if (string.IsNullOrEmpty(extractedUrl))
                {
                    logger.LogWarning("[UpdateHandler] Url was extracted unsuccessful");

                    await botClient.SendMessage(telegramId,
                        "–≠—ç—ç‚Ä¶ –ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–æ—á–∫—É –≤ —Ç–≤–æ—ë–º —Å–æ–æ–±—â–µ–Ω–∏–∏ üòø\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –Ø –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—é—Å—å~ üå∏",
                        cancellationToken: cancellationToken);

                    return;
                }

                logger.LogInformation($"[UpdateHandler] Url was extracted: {extractedUrl}");

                var outputMessage = await botClient.SendMessage(telegramId,
                    "–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ ^_^",
                    cancellationToken: cancellationToken);

                var result = await downloader.SendDownloadRequest(extractedUrl, telegramId, outputMessage.MessageId);

                logger.LogInformation($"[UpdateHandler] Download request result: {result}");

                if (result)
                {
                    await botClient.EditMessageText(
                        chatId: telegramId,
                        messageId: outputMessage.MessageId,
                        text: "–£—Ä–∞! –°–µ–π—á–∞—Å –Ω–∞–π–¥—É –≤–∏–¥–µ–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–ª–æ–∂—É –µ–≥–æ –≤ –∫–æ—Ä–æ–±–æ—á–∫—É~ üì¶\n–ù–µ–º–Ω–æ–∂–µ—á–∫–æ –ø–æ–¥–æ–∂–¥–∏, —Ö–æ—Ä–æ—à–æ? üé∂",
                        cancellationToken: cancellationToken);
                }
                else
                {
                    await botClient.EditMessageText(
                        chatId: telegramId,
                        messageId: outputMessage.MessageId,
                        text:
                        "–û–π-–æ–π‚Ä¶ –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —è –Ω–µ —Å–º–æ–≥–ª–∞ –¥–æ—Å—Ç–∞—Ç—å –≤–∏–¥–µ–æ üò¢\n–ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ?..",
                        cancellationToken: cancellationToken);
                }
            }
        }
        catch (Exception _)
        {
            logger.LogCritical($"[UpdateHandler] Unhanded error: {_}");

            await botClient.SendMessage(telegramId,
                "–û–π-–æ–π‚Ä¶ –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —è –Ω–µ —Å–º–æ–≥–ª–∞ –¥–æ—Å—Ç–∞—Ç—å –≤–∏–¥–µ–æ üò¢\n–ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ?..",
                cancellationToken: cancellationToken);
        }
    }

    public Task HandleErrorAsync(ITelegramBotClient telegramBotClient, Exception exception, HandleErrorSource source,
        CancellationToken cancellationToken)
    {
        return Task.CompletedTask;
    }

    private static long? GetChatIdOrDefault(Update update)
    {
        return update.Message?.Chat.Id;
    }

    private static string? TryExtractUrl(Message message)
    {
        var text = (message.Text ?? message.Caption) ?? string.Empty;

        var regex = new Regex(@"https?:\/\/[^\s]+", RegexOptions.IgnoreCase);
        var match = regex.Match(text);

        return match.Success ? match.Value : null;
    }
}